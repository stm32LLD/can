// Copyright (c) 2023  Ziga Miklosic
// All Rights Reserved
////////////////////////////////////////////////////////////////////////////////
/**
*@file      can_cfg.c
*@brief     Configuration for CAN LL drivers based on STM32 HAL library
*@author    Ziga Miklosic
*@email     ziga.miklosic@gmail.si
*@date      26.06.2023
*@version   V0.1.0
*/
////////////////////////////////////////////////////////////////////////////////
/*!
* @addtogroup UART_CFG
* @{ <!-- BEGIN GROUP -->
*/
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Includes
////////////////////////////////////////////////////////////////////////////////
#include <stdlib.h>
#include <stdint.h>
#include <stdbool.h>

#include "can_cfg.h"

// USER INCLUDE BEGIN...

#include "config/proj_cfg.h"
#include "config/pin_mapper.h"

// USER INCLUDE END...


////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////

/**
 *  CAN baudrate options
 */
enum
{
    eCAN_BAUDRATE_125k = 0,
    eCAN_BAUDRATE_250k,
    eCAN_BAUDRATE_500k,
    eCAN_BAUDRATE_1M,
    eCAN_BAUDRATE_2M,

    eCAN_BAUDRATE_NUM_OF
};

/**
 *  PRECALCULATED BAUDRATE SETTINGS
 *
 *  @note   Applicable only to uses where FDCAN peripheral clock is set to 150 MHz !
 *
 *          Useful webpage for baudrate calcualtions: http://www.bittiming.can-wiki.info/
 */
static const can_baud_cfg_t g_can_baud_cfg[eCAN_BAUDRATE_NUM_OF] =
{
    [eCAN_BAUDRATE_125k]    = { .prescaler = 75U,   .sjw = 1U, .seg1 = 13U, .seg2 = 2U },
    [eCAN_BAUDRATE_250k]    = { .prescaler = 40U,   .sjw = 1U, .seg1 = 12U, .seg2 = 2U },
    [eCAN_BAUDRATE_500k]    = { .prescaler = 20U,   .sjw = 1U, .seg1 = 12U, .seg2 = 2U },
    [eCAN_BAUDRATE_1M]      = { .prescaler = 10U,   .sjw = 1U, .seg1 = 12U, .seg2 = 2U },
    [eCAN_BAUDRATE_2M]      = { .prescaler = 5U,    .sjw = 1U, .seg1 = 12U, .seg2 = 2U },
};


////////////////////////////////////////////////////////////////////////////////
// Variables
////////////////////////////////////////////////////////////////////////////////

/**
 *      CAN Channel Configuration
 */
static const can_cfg_t g_can_cfg[eCAN_CH_NUM_OF] =
{
    // USER CODE BEGIN...

    // =============================================================
    //      System CAN Settings
    // =============================================================
    [eCAN_SYSTEM] =
    {
        .p_instance     = FDCAN1,

        // Normal Baudrate
        .baud_nor =
        {
            .prescaler  = g_can_baud_cfg[eCAN_BAUDRATE_500k].prescaler,
            .sjw        = g_can_baud_cfg[eCAN_BAUDRATE_500k].sjw,
            .seg1       = g_can_baud_cfg[eCAN_BAUDRATE_500k].seg1,
            .seg2       = g_can_baud_cfg[eCAN_BAUDRATE_500k].seg2,
        },

        // Use FD
        .fd = false,

        // Fast Baudrate
        .baud_data =
        {
            .prescaler  = g_can_baud_cfg[eCAN_BAUDRATE_2M].prescaler,
            .sjw        = g_can_baud_cfg[eCAN_BAUDRATE_2M].sjw,
            .seg1       = g_can_baud_cfg[eCAN_BAUDRATE_2M].seg1,
            .seg2       = g_can_baud_cfg[eCAN_BAUDRATE_2M].seg2,
        },

        // NOTE: Size of single element in buffer is 72 bytes!
        .rx_buf_size    = 8U,
        .tx_buf_size    = 16U,

        .tx_pin =
        {
            .p_port = CAN_TX__PORT,
            .pin    = CAN_TX__PIN,
            .pull   = CAN_TX__PULL,
            .af     = CAN_TX__AF
        },

        .rx_pin =
        {
            .p_port = CAN_RX__PORT,
            .pin    = CAN_RX__PIN,
            .pull   = CAN_RX__PULL,
            .af     = CAN_RX__AF
        },

        .irq_prio   = PROJ_CFG_IRQ_PRIO_CAN_SYS,
        .irq_num    = FDCAN1_IT0_IRQn,
    },

    // USER CODE END...
};

////////////////////////////////////////////////////////////////////////////////
// Functions
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
/**
* @} <!-- END GROUP -->
*/
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
/**
*@addtogroup CAN_CFG_API
* @{ <!-- BEGIN GROUP -->
*
* 	Following function are part of CAN Configuration API.
*/
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
/**
*       Get CAN configurations
*
* @return       &g_can_cfg - Address to CAN config table
*/
////////////////////////////////////////////////////////////////////////////////
can_cfg_t * can_cfg_get_config(const can_ch_t can_ch)
{
    CAN_ASSERT( can_ch < eCAN_CH_NUM_OF );

    return (can_cfg_t*) &g_can_cfg[can_ch];
}

////////////////////////////////////////////////////////////////////////////////
/**
* @} <!-- END GROUP -->
*/
////////////////////////////////////////////////////////////////////////////////
