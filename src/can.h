// Copyright (c) 2023 Ziga Miklosic
// All Rights Reserved
////////////////////////////////////////////////////////////////////////////////
/**
*@file      can.h
*@brief     CAN LL drivers based on STM32 HAL library
*@author    Ziga Miklosic
*@email		ziga.miklosic@gmail.si
*@date      26.06.2023
*@version   V0.1.0
*/
////////////////////////////////////////////////////////////////////////////////
/**
*@addtogroup CAN_API
* @{ <!-- BEGIN GROUP -->
*
*/
////////////////////////////////////////////////////////////////////////////////

#ifndef __CAN_H
#define __CAN_H

////////////////////////////////////////////////////////////////////////////////
// Includes
////////////////////////////////////////////////////////////////////////////////
#include <stdlib.h>
#include <stdint.h>
#include <stdbool.h>

#include "../../can_cfg.h"

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////

/**
 *  Module version
 */
#define CAN_VER_MAJOR          ( 0 )
#define CAN_VER_MINOR          ( 1 )
#define CAN_VER_DEVELOP        ( 0 )

/**
 *  CAN status
 */
typedef enum
{
    eCAN_OK         = 0x00U,    /**<Normal operation */
    eCAN_ERROR      = 0x01U,    /**<General error code */
    eCAN_WAR_EMPTY  = 0x02U,    /**<Buffer empty warning */
    eCAN_WAR_FULL   = 0x04U,    /**<Buffer full warning */
} can_status_t;

////////////////////////////////////////////////////////////////////////////////
// Functions
////////////////////////////////////////////////////////////////////////////////
can_status_t can_init       (const can_ch_t can_ch);
can_status_t can_deinit     (const can_ch_t can_ch);
can_status_t can_is_init    (const can_ch_t can_ch, bool * const p_is_init);
can_status_t can_transmit   (const can_ch_t can_ch, const uint8_t * const p_data, const uint32_t size);
can_status_t can_receive    (const can_ch_t can_ch, uint8_t * const p_data);

#endif // __CAN_H

////////////////////////////////////////////////////////////////////////////////
/**
* @} <!-- END GROUP -->
*/
////////////////////////////////////////////////////////////////////////////////
